- name: "Desplegar Encuestas"
  hosts: localhost
  vars_files:
    - vars.yaml
  tasks:
    - name: "Crear la VM desde una plantilla"
      proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password }}"
        api_port: 8006
        clone: "{{ template }}"
        cores: "{{ vm_cores }}"
        memory: "{{ vm_memory }}"
        scsi:
          scsi0: "{{ storage }}:{{ vm_disk_size }},format=qcow2"
        name: "{{ vm_name }}"
        net:
          net0: "virtio,bridge=vmbr0,ip={{ vm_ip }}/24,gw=192.168.219.1"
        node: "{{ proxmox_node }}"
        sshkeys: "{{ lookup('file', 'key.pub') }}"
        state: present
        full: true
        timeout: 300
      register: vm_result

    - name: "Mostrar resultado de la creación"
      debug:
        msg: "VM creada exitosamente con ID: {{ vm_result.vmid }}"
      when: vm_result.changed

    - name: "Iniciar la VM"
      proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password }}"
        api_port: 8006
        vmid: "{{ vm_result.vmid }}"
        state: started
      register: start_result
    
    - name: "Esperar a que la VM esté en línea"
      wait_for:
        host: "{{ vm_ip }}"
        port: 22
        delay: 30
        timeout: 600
      when: start_result.changed
    
    - name: "Preparar clave SSH"
      block:
        - name: "Crear directorio .ssh en WSL"
          ansible.builtin.command:
            cmd: "mkdir -p ~/.ssh"
          ignore_errors: yes
        
        - name: "Copiar clave privada a WSL"
          ansible.builtin.command:
            cmd: "cp /mnt/c/Users/willi/.ssh/id_ed25519 ~/.ssh/"
          ignore_errors: yes
        
        - name: "Ajustar permisos de la clave"
          ansible.builtin.command:
            cmd: "chmod 600 ~/.ssh/id_ed25519"
          ignore_errors: yes

    - name: "Conectarse a la VM usando SSH"
      ansible.builtin.command:
        cmd: "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/id_ed25519 encuesta@{{ vm_ip }} 'echo VM is online'"
      register: ssh_result
      ignore_errors: yes
      retries: 3
      delay: 10
      
    - name: "Mostrar resultado de conexión SSH"
      debug:
        msg: "SSH Status: {{ 'Connected' if ssh_result.rc == 0 else 'Failed' }}"
    
    - name: "Instalar Docker en la VM"
      ansible.builtin.command:
        cmd: "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/id_ed25519 encuesta@{{ vm_ip }} 'sudo apt-get update && sudo apt-get install -y docker.io docker-compose'"
      register: docker_install_result
      when: ssh_result.rc == 0

    - name: "Crear directorio de aplicación en la VM"
      ansible.builtin.command:
        cmd: "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/id_ed25519 encuesta@{{ vm_ip }} 'sudo mkdir -p /home/encuesta/app'"
      when: ssh_result.rc == 0

    - name: "Enviar docker-compose.yml a la VM"
      ansible.builtin.command:
        cmd: "scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/id_ed25519 docker-compose.yml encuesta@{{ vm_ip }}:/home/encuesta/"
      when: ssh_result.rc == 0

    - name: "Enviar archivos de aplicación a la VM"
      ansible.builtin.command:
        cmd: "scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/id_ed25519 -r {{ item }} encuesta@{{ vm_ip }}:/home/encuesta/app/"
      loop:
        - "Answer/"
        - "Encuestas2/"
        - "ExportCsvFn/"
        - "Report/"
        - "Survey/"
        - "manage.py"
        - "requirements.txt"
      when: ssh_result.rc == 0

    - name: "Instalar dependencias de Python en la VM"
      ansible.builtin.command:
        cmd: "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/id_ed25519 encuesta@{{ vm_ip }} 'cd /home/encuesta/app && sudo apt-get install -y python3-pip && pip3 install -r requirements.txt'"
      register: pip_install_result
      when: ssh_result.rc == 0
      ignore_errors: yes

    - name: "Iniciar aplicación con Docker Compose"
      ansible.builtin.command:
        cmd: "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/id_ed25519 encuesta@{{ vm_ip }} 'cd /home/encuesta && docker-compose up -d'"
      register: docker_compose_result
      when: ssh_result.rc == 0
      ignore_errors: yes
    
    - name: "Configurar firewall y abrir puertos"
      ansible.builtin.command:
        cmd: "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/id_ed25519 encuesta@{{ vm_ip }} 'sudo ufw --force enable && sudo ufw allow 22 && sudo ufw allow 8000 && sudo ufw allow 8001 && sudo ufw allow 8002 && sudo ufw allow 8003 && sudo ufw reload'"
      when: ssh_result.rc == 0
      ignore_errors: yes
    
    - name: "Mostrar estado final del despliegue"
      debug:
        msg: 
          - "VM ID: {{ vm_result.vmid }}"
          - "VM IP: {{ vm_ip }}"
          - "Estado SSH: {{ 'Conectado' if ssh_result.rc == 0 else 'Error de conexión' }}"
          - "Docker Compose: {{ 'Iniciado' if docker_compose_result is defined and docker_compose_result.rc == 0 else 'Error o no ejecutado' }}"
      when: vm_result is defined

