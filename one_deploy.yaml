- name: "Desplegar Encuestas"
  hosts: localhost
  vars_files:
    - vars.yaml
  vars:
    ssh_user: "encuesta"
    ssh_key_path: "/mnt/c/Users/willi/.ssh/id_ed25519"
    sudo_password: "12345678"
  tasks:
    - name: "Crear la VM desde una plantilla"
      proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password }}"
        api_port: 8006
        clone: "{{ template }}"
        cores: "{{ vm_cores }}"
        memory: "{{ vm_memory }}"
        scsi:
          scsi0: "{{ storage }}:{{ vm_disk_size }},format=qcow2"
        name: "{{ vm_name }}"
        net:
          net0: "virtio,bridge=vmbr0,ip={{ vm_ip }}/24,gw=192.168.219.1"
        node: "{{ proxmox_node }}"
        sshkeys: "{{ lookup('file', ssh_key_path + '.pub') }}"
        state: present
        full: true
        timeout: 300
      register: vm_result

    - name: "Mostrar resultado de la creación"
      debug:
        msg: "VM creada exitosamente con ID: {{ vm_result.vmid }}"
      when: vm_result.changed

    - name: "Iniciar la VM"
      proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password }}"
        api_port: 8006
        name: "{{ vm_name }}"
        state: started
      register: start_result
    
    - name: "Esperar a que la VM esté en línea"
      wait_for:
        host: "{{ vm_ip }}"
        port: 22
        delay: 30
        timeout: 600
      when: start_result.changed
    
    - name: "Conectarse a la VM usando SSH"
      ansible.builtin.command:
        cmd: "ssh -i {{ ssh_key_path }} {{ ssh_user }}@{{ vm_ip }} 'echo VM is online'"
      register: ssh_result
      ignore_errors: yes
      retries: 3
      delay: 10
      
    - name: "Mostrar resultado de conexión SSH"
      debug:
        msg: "SSH Status: {{ 'Connected' if ssh_result.rc == 0 else 'Failed' }}"
    
    - name: "Esperar a que termine unattended-upgrades"
      ansible.builtin.command:
        cmd: "ssh -i {{ ssh_key_path }} {{ ssh_user }}@{{ vm_ip }} 'echo {{ sudo_password }} | sudo -S killall unattended-upgr || true && echo {{ sudo_password }} | sudo -S rm -f /var/lib/dpkg/lock-frontend /var/lib/dpkg/lock /var/cache/apt/archives/lock || true && sleep 5'"
      when: ssh_result.rc == 0
    
    - name: "Instalar Docker en la VM"
      ansible.builtin.command:
        cmd: "ssh -i {{ ssh_key_path }} {{ ssh_user }}@{{ vm_ip }} 'echo {{ sudo_password }} | sudo -S dpkg --configure -a && echo {{ sudo_password }} | sudo -S apt-get update && echo {{ sudo_password }} | sudo -S apt-get install -y docker.io docker-compose'"
      when: ssh_result.rc == 0

    - name: "Agregar usuario al grupo docker"
      ansible.builtin.command:
        cmd: "ssh -i {{ ssh_key_path }} {{ ssh_user }}@{{ vm_ip }} 'echo {{ sudo_password }} | sudo -S usermod -aG docker encuesta'"
      when: ssh_result.rc == 0

    - name: "Iniciar Docker"
      ansible.builtin.command:
        cmd: "ssh -i {{ ssh_key_path }} {{ ssh_user }}@{{ vm_ip }} 'echo {{ sudo_password }} | sudo -S systemctl start docker'"
      when: ssh_result.rc == 0

    - name: "Crear directorio de aplicación"
      ansible.builtin.command:
        cmd: "ssh -i {{ ssh_key_path }} {{ ssh_user }}@{{ vm_ip }} 'mkdir -p /home/encuesta/app'"
      when: ssh_result.rc == 0

    - name: "Enviar docker-compose.yml"
      ansible.builtin.command:
        cmd: "scp -i {{ ssh_key_path }} docker-compose.yml {{ ssh_user }}@{{ vm_ip }}:/home/encuesta/app/"
      when: ssh_result.rc == 0

    - name: "Enviar archivos de aplicación"
      ansible.builtin.command:
        cmd: "scp -i {{ ssh_key_path }} -r {{ item }} {{ ssh_user }}@{{ vm_ip }}:/home/encuesta/app/"
      loop:
        - "Answer/"
        - "Encuestas2/"
        - "ExportCsvFn/"
        - "Report/"
        - "Survey/"
        - "manage.py"
        - "requirements.txt"
      when: ssh_result.rc == 0

    - name: "Ejecutar docker-compose"
      ansible.builtin.command:
        cmd: "ssh -i {{ ssh_key_path }} {{ ssh_user }}@{{ vm_ip }} 'cd /home/encuesta/app && sg docker -c \"docker-compose up -d --build\"'"
      when: ssh_result.rc == 0
    
    - name: "Configurar firewall"
      ansible.builtin.command:
        cmd: "ssh -i {{ ssh_key_path }} {{ ssh_user }}@{{ vm_ip }} 'echo {{ sudo_password }} | sudo -S ufw --force enable && echo {{ sudo_password }} | sudo -S ufw allow 22 && echo {{ sudo_password }} | sudo -S ufw allow 8000 && echo {{ sudo_password }} | sudo -S ufw allow 8001 && echo {{ sudo_password }} | sudo -S ufw allow 8002 && echo {{ sudo_password }} | sudo -S ufw allow 8003'"
      when: ssh_result.rc == 0
    
    - name: "Mostrar estado final"
      debug:
        msg: 
          - "VM: {{ vm_name }}"
          - "IP: {{ vm_ip }}"
          - "SSH: {{ 'OK' if ssh_result.rc == 0 else 'Error' }}"

